// Code generated by protoc-gen-cobra.
// source: auth.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	auth.proto
	store.proto

It has these top-level commands:
	AuthClientCommand
	StoreClientCommand
*/

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	tls "crypto/tls"
	grpc "google.golang.org/grpc"
	iocodec "github.com/fiorix/protoc-gen-cobra/iocodec"
	ioutil "io/ioutil"
	json "encoding/json"
	log "log"
	time "time"
	credentials "google.golang.org/grpc/credentials"
	filepath "path/filepath"
	pflag "github.com/spf13/pflag"
	template "text/template"
	x509 "crypto/x509"
	cobra "github.com/spf13/cobra"
	context "context"
	os "os"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ cobra.Command
var _ context.Context
var _ pflag.FlagSet
var _ template.Template
var _ x509.Certificate
var _ os.File
var _ tls.Config
var _ json.Encoder
var _ log.Logger
var _ time.Time
var _ credentials.AuthInfo
var _ filepath.WalkFunc
var _ grpc.ClientConn
var _ iocodec.Encoder
var _ = ioutil.Discard

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

var _DefaultAuthClientCmdConfig = _NewAuthClientCmdConfig()

func init() {
	_DefaultAuthClientCmdConfig.AddFlags(AuthClientCommand.PersistentFlags())
}

type _AuthClientCmdConfig struct {
	ServerAddr         string
	RequestFile        string
	PrintSampleRequest bool
	ResponseFormat     string
	Timeout            time.Duration
	TLS                bool
	InsecureSkipVerify bool
	CACertFile         string
	CertFile           string
	KeyFile            string
}

func _NewAuthClientCmdConfig() *_AuthClientCmdConfig {
	addr := os.Getenv("SERVER_ADDR")
	if addr == "" {
		addr = "localhost:8080"
	}
	timeout, err := time.ParseDuration(os.Getenv("TIMEOUT"))
	if err != nil {
		timeout = 10 * time.Second
	}
	outfmt := os.Getenv("RESPONSE_FORMAT")
	if outfmt == "" {
		outfmt = "yaml"
	}
	return &_AuthClientCmdConfig{
		ServerAddr:         addr,
		RequestFile:        os.Getenv("REQUEST_FILE"),
		PrintSampleRequest: os.Getenv("PRINT_SAMPLE_REQUEST") != "",
		ResponseFormat:     outfmt,
		Timeout:            timeout,
		TLS:                os.Getenv("TLS") != "",
		InsecureSkipVerify: os.Getenv("TLS_INSECURE_SKIP_VERIFY") != "",
		CACertFile:         os.Getenv("TLS_CA_CERT_FILE"),
		CertFile:           os.Getenv("TLS_CERT_FILE"),
		KeyFile:            os.Getenv("TLS_KEY_FILE"),
	}
}

func (o *_AuthClientCmdConfig) AddFlags(fs *pflag.FlagSet) {
	fs.StringVarP(&o.ServerAddr, "server-addr", "s", o.ServerAddr, "server address in form of host:port")
	fs.StringVarP(&o.RequestFile, "request-file", "f", o.RequestFile, "client request file (extension must be yaml, json, or xml)")
	fs.BoolVar(&o.PrintSampleRequest, "print-sample-request", o.PrintSampleRequest, "print sample request file and exit")
	fs.StringVarP(&o.ResponseFormat, "response-format", "o", o.ResponseFormat, "response format (yaml, json, or xml)")
	fs.DurationVar(&o.Timeout, "timeout", o.Timeout, "client connection timeout")
	fs.BoolVar(&o.TLS, "tls", o.TLS, "enable tls")
	fs.BoolVar(&o.InsecureSkipVerify, "tls-insecure-skip-verify", o.InsecureSkipVerify, "INSECURE: skip tls checks")
	fs.StringVar(&o.CACertFile, "tls-ca-cert-file", o.CACertFile, "ca certificate file")
	fs.StringVar(&o.CertFile, "tls-cert-file", o.CertFile, "client certificate file")
	fs.StringVar(&o.KeyFile, "tls-key-file", o.KeyFile, "client key file")
}

var AuthClientCommand = &cobra.Command{
	Use: "auth",
}

func _DialAuth() (*grpc.ClientConn, AuthClient, error) {
	cfg := _DefaultAuthClientCmdConfig
	opts := []grpc.DialOption{
		grpc.WithBlock(),
		grpc.WithTimeout(cfg.Timeout),
	}
	if cfg.TLS {
		// TODO: TLS setup for CA and client cert.
		tlsConfig := tls.Config{}
		if cfg.InsecureSkipVerify {
			tlsConfig.InsecureSkipVerify = true
		}
		if cfg.CACertFile != "" {
			cacert, err := ioutil.ReadFile(cfg.CACertFile)
			if err != nil {
				return nil, nil, fmt.Errorf("ca cert: %v", err)
			}
			certpool := x509.NewCertPool()
			certpool.AppendCertsFromPEM(cacert)
			tlsConfig.RootCAs = certpool
		}
		if cfg.CertFile != "" {
			if cfg.KeyFile == "" {
				return nil, nil, fmt.Errorf("missing key file")
			}
			pair, err := tls.LoadX509KeyPair(cfg.CertFile, cfg.KeyFile)
			if err != nil {
				return nil, nil, fmt.Errorf("cert/key: %v", err)
			}
			tlsConfig.Certificates = []tls.Certificate{pair}
		}
		cred := credentials.NewTLS(&tlsConfig)
		opts = append(opts, grpc.WithTransportCredentials(cred))
	} else {
		opts = append(opts, grpc.WithInsecure())
	}
	conn, err := grpc.Dial(cfg.ServerAddr, opts...)
	if err != nil {
		return nil, nil, err
	}
	return conn, NewAuthClient(conn), nil
}

type _AuthRoundTripFunc func(cli AuthClient) (out interface{}, err error)

func _AuthRoundTrip(v interface{}, fn _AuthRoundTripFunc) error {
	cfg := _DefaultAuthClientCmdConfig
	var e iocodec.EncoderMaker
	var ok bool
	if cfg.ResponseFormat == "" {
		e = iocodec.DefaultEncoders["yaml"]
	} else {
		e, ok = iocodec.DefaultEncoders[cfg.ResponseFormat]
		if !ok {
			return fmt.Errorf("invalid response format: %q", cfg.ResponseFormat)
		}
	}
	if cfg.PrintSampleRequest {
		return e.NewEncoder(os.Stdout).Encode(v)
	}
	if cfg.RequestFile == "" {
		return fmt.Errorf("no request file")
	}
	ext := filepath.Ext(cfg.RequestFile)
	if len(ext) > 0 && ext[0] == '.' {
		ext = ext[1:]
	}
	d, ok := iocodec.DefaultDecoders[ext]
	if !ok {
		return fmt.Errorf("invalid request file format: %q", ext)
	}
	f, err := os.Open(cfg.RequestFile)
	if err != nil {
		return fmt.Errorf("request file: %v", err)
	}
	defer f.Close()
	err = d.NewDecoder(f).Decode(v)
	if err != nil {
		return fmt.Errorf("request parser: %v", err)
	}
	conn, client, err := _DialAuth()
	if err != nil {
		return err
	}
	defer conn.Close()
	out, err := fn(client)
	if err != nil {
		return err
	}
	return e.NewEncoder(os.Stdout).Encode(out)
}

var _AuthLoginClientCmd = &cobra.Command{
	Use: "login",
	Run: func(cmd *cobra.Command, args []string) {
		var in LoginRequest
		err := _AuthRoundTrip(&in, func(cli AuthClient) (interface{}, error) {
			return cli.Login(context.Background(), &in)
		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	AuthClientCommand.AddCommand(_AuthLoginClientCmd)
}

var _AuthLogoutClientCmd = &cobra.Command{
	Use: "logout",
	Run: func(cmd *cobra.Command, args []string) {
		var in LogoutRequest
		err := _AuthRoundTrip(&in, func(cli AuthClient) (interface{}, error) {
			return cli.Logout(context.Background(), &in)
		})
		if err != nil {
			log.Fatal(err)
		}
	},
}

func init() {
	AuthClientCommand.AddCommand(_AuthLogoutClientCmd)
}
